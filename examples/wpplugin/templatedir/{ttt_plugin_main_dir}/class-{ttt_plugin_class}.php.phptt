>?php
/**
 * <?php echo $args['Plugin Class'];?> main class
 *
 */

// Exit if accessed directly.
defined( 'ABSPATH' ) || exit;

if ( ! class_exists( '<?php echo $args['Plugin Class'];?>', false ) ) {

	/**
	 * Main <?php echo $args['Plugin Class'];?> class
	 *
	 * @since       ?.0.0
	 */
	class <?php echo $args['Plugin Class'];?> {

		/**
		 * Option array.
		 *
		 * @access      protected
		 * @var         array $options Array of config options
		 * @since       ?.0.0
		 */
		protected $options = array();

		/**
		 * Network option array.
		 *
		 * @access      protected
		 * @var         array $options Array of network config options
		 * @since       ?.0.0
		 */
		protected $networkoptions = array();

		/**
		 * Use this value as the text domain when translating strings from this plugin. It should match
		 * the Text Domain field set in the plugin header, as well as the directory name of the plugin.
		 * Additionally, text domains should only contain letters, number and hypens, not underscores
		 * or spaces.
		 *
		 * @access      protected
		 * @var         string $plugin_slug The unique ID (slug) of this plugin
		 * @since       3.0.0
		 */
		protected $plugin_slug = '<?php echo $args['Plugin Slug'];?>';

		/**
		 * Set on network activate.
		 *
		 * @access      protected
		 * @var         string $plugin_network_activated Check for plugin network activation
		 * @since       ?.0.0
		 */
		protected $plugin_network_activated = null;

		/**
		 * Class instance.
		 *
		 * @access      private
		 * @var         \<?php echo $args['Plugin Class'];?> $instance The one true <?php echo $args['Plugin Class'];?> 
		 * @since       ?.0.0
		 */
		private static $instance;

		/**
		 * Get active instance
		 *
		 * @access      public
		 * @since       3.1.3
		 * @return      self::$instance The one true <?php echo $args['Plugin Class'];?>
		 */
		public static function instance() {
			$path = WP_PLUGIN_DIR . '<?php echo $args['Plugin Slug'];?>/<?php echo $args['Plugin Slug'];?>.php';

			if ( function_exists( 'get_plugin_data' ) && file_exists( $path ) ) {
				$data = get_plugin_data( $path );

				if ( isset( $data ) && isset( $data['Version'] ) && '' !== $data['Version'] ) {
					//$res = version_compare( $data['Version'], '4', '<' );
				        // need to do something with version?
				}

			}

			if ( ! self::$instance ) {
				self::$instance = new self();

				self::$instance->get_plugin_options();
				self::$instance->includes();
				self::$instance->hooks();
			}

			return self::$instance;
		}

		/**
		 * Get plugin options
		 *
		 * @access      public
		 * @since       x.y.z
		 * @return      void
		 */
		public function get_plugin_options() {

			// Setup defaults.
			$defaults = array(
				'demo' => false,
			);
			$networkdefaults = array(
				'demo' => false,
			);

			// If multisite is enabled.
			if ( is_multisite() ) {

				// Get network activated plugins.
				$plugins = get_site_option( 'active_sitewide_plugins' );

				foreach ( $plugins as $file => $plugin ) {
					if ( strpos( $file, '<?php echo $args['Plugin Slug'];?>.php' ) !== false ) {
						$this->plugin_network_activated = true;
						//$this->options                  = get_site_option( '<?php echo $args['Plugin Class'];?>', $defaults );
					}
				}
			}

			// If options aren't set, grab them now!
			/*
			if ( empty( $this->options ) ) {
				$this->options = get_option( '<?php echo $args['Plugin Class'];?>', $defaults );
			} else {
				$this->options = get_option( '<?php echo $args['Plugin Class'];?>', $this->options );
			}
			*/
			$this->options = get_option( '<?php echo $args['Plugin Class'];?>', $defaults );
			$this->networkoptions = get_site_option( '<?php echo $args['Plugin Class'];?>', $networkdefaults );			
		}

		/**
		 * Include necessary files
		 *
		 * @access      public
		 * @since       3.1.3
		 * @return      void
		 */
		public function includes() {

			// Include Predux_Core.
			// if ( file_exists( dirname( __FILE__ ) . '/PreduxCore/framework.php' ) ) {
			// 	require_once dirname( __FILE__ ) . '/PreduxCore/framework.php';
			// }

			// if ( isset( Predux_Core::$as_plugin ) ) {
			// 	Predux_Core::$as_plugin = true;
			// }

			// // Include demo config, if demo mode is active.
			// if ( $this->options['demo'] && file_exists( dirname( __FILE__ ) . '/sample/sample-config.php' ) ) {
			// 	require_once dirname( __FILE__ ) . '/sample/sample-config.php';
			// }
		}

		/**
		 * Run action and filter hooks
		 *
		 * @access      private
		 * @since       3.1.3
		 * @return      void
		 */
		private function hooks() {
			//add_action( 'wp_loaded', array( $this, 'options_toggle_check' ) );

			// Activate plugin when new blog is added.
			add_action( 'wpmu_new_blog', array( $this, 'activate_new_site' ) );

			// Display admin notices.
			add_action( 'admin_notices', array( $this, 'admin_notices' ) );

			// Edit plugin metalinks.
			add_filter( 'plugin_row_meta', array( $this, 'plugin_metalinks' ), null, 2 );

			add_action( 'activated_plugin', array( $this, 'load_first' ) );

			// phpcs:ignore WordPress.NamingConventions.ValidHookName
			do_action( '<?php echo getenv('ttt_plugin_slug2');?>/plugin/hooks', $this );
		}

		/**
		 * Pushes Predux to top of plugin load list, so it initializes before any plugin that may use it.
		 */
		public function load_first() {
			// $plugin_dir = Predux_Functions_Ex::wp_normalize_path( WP_PLUGIN_DIR ) . '/';
			// $self_file  = Predux_Functions_Ex::wp_normalize_path( __FILE__ );

			// $path = str_replace( $plugin_dir, '', $self_file );
			// $path = str_replace( 'class-redux-framework-plugin.php', 'redux-framework.php', $path );

			// $plugins = get_option( 'active_plugins' );

			// if ( $plugins ) {
			// 	$key = array_search( $path, $plugins, true );

			// 	if ( false !== $key ) {
			// 		array_splice( $plugins, $key, 1 );
			// 		array_unshift( $plugins, $path );
			// 		update_option( 'active_plugins', $plugins );
			// 	}

			// 	if ( class_exists( 'Predux_Pro' ) ) {
			// 		$self_file = Predux_Functions_Ex::wp_normalize_path( Predux_Pro::$dir );
			// 		$path      = str_replace( $plugin_dir, '', $self_file );

			// 		// phpcs:ignore WordPress.NamingConventions.ValidHookName
			// 		$basename = apply_filters( 'redux/pro/basename', 'redux-pro.php' );

			// 		$key = array_search( $path . '/' . $basename, $plugins, true );
			// 		if ( false !== $key ) {
			// 			array_splice( $plugins, $key, 1 );
			// 			array_unshift( $plugins, $path . '/' . $basename );
			// 			update_option( 'active_plugins', $plugins );
			// 		}
			// 	}
			// }
		}

		/**
		 * Fired on plugin activation
		 *
		 * @access      public
		 * @since       3.0.0
		 *
		 * @param       boolean $network_wide True if plugin is network activated, false otherwise.
		 *
		 * @return      void
		 */
		public static function activate( $network_wide ) {
			if ( function_exists( 'is_multisite' ) && is_multisite() ) {
				if ( $network_wide ) {
					// Get all blog IDs.
					$blog_ids = self::get_blog_ids();

					foreach ( $blog_ids as $blog_id ) {
						switch_to_blog( $blog_id );
						self::single_activate();
						// https://developer.wordpress.org/reference/functions/restore_current_blog/
						restore_current_blog();
					}
				} else {
					self::single_activate();
				}
			} else {
				self::single_activate();
			}

			delete_site_transient( 'update_plugins' );
		}

		/**
		 * Fired when plugin is deactivated
		 *
		 * @access      public
		 * @since       3.0.0
		 *
		 * @param       boolean $network_wide True if plugin is network activated, false otherwise.
		 *
		 * @return      void
		 */
		public static function deactivate( $network_wide ) {
			if ( function_exists( 'is_multisite' ) && is_multisite() ) {
				if ( $network_wide ) {
					// Get all blog IDs.
					$blog_ids = self::get_blog_ids();

					foreach ( $blog_ids as $blog_id ) {
						switch_to_blog( $blog_id );
						self::single_deactivate();
					}
					restore_current_blog();
				} else {
					self::single_deactivate();
				}
			} else {
				self::single_deactivate();
			}

			delete_option( '<?php echo $args['Plugin Class'];?>' );
		}

		/**
		 * Fired when a new WPMU site is activated
		 *
		 * @access      public
		 * @since       3.0.0
		 *
		 * @param       int $blog_id The ID of the new blog.
		 *
		 * @return      void
		 */
		public function activate_new_site( $blog_id ) {
			if ( 1 !== did_action( 'wpmu_new_blog' ) ) {
				return;
			}

			switch_to_blog( $blog_id );
			self::single_activate();
			restore_current_blog();
		}

		/**
		 * Get all IDs of blogs that are not activated, not spam, and not deleted
		 *
		 * @access      private
		 * @since       3.0.0
		 * @global      object $wpdb
		 * @return      array|false Array of IDs or false if none are found
		 */
		private static function get_blog_ids() {
			global $wpdb;

			$var = '0';

			// Get an array of IDs (We have to do it this way because WordPress ays so, however reduntant.
			$result = wp_cache_get( '<?php echo $args['Plugin Slug'];?>-blog-ids' );
			if ( false === $result ) {

				// WordPress asys get_col is discouraged?  I found no alternative.  So...ignore! - kp.
				// phpcs:ignore WordPress.DB.DirectDatabaseQuery
				$result = $wpdb->get_col( $wpdb->prepare( "SELECT blog_id FROM $wpdb->blogs WHERE archived = %s AND spam = %s AND deleted = %s", $var, $var, $var ) );

				wp_cache_set( '<?php echo $args['Plugin Slug'];?>-blog-ids', $result );
			}

			return $result;
		}

		/**
		 * Fired for each WPMS blog on plugin activation
		 *
		 * @access      private
		 * @since       3.0.0
		 * @return      void
		 */
		private static function single_activate() {
			// $notices = array();

			// $nonce = wp_create_nonce( 'redux_framework_demo' );

			// $notices   = get_option( '<?php echo $args['Plugin Class'];?>_ACTIVATED_NOTICES', array() );
			// $notices[] = esc_html__( 'Predux Framework has an embedded demo.', 'redux-framework' ) . ' <a href="./plugins.php?redux-framework-plugin=demo&nonce=' . $nonce . '">' . esc_html__( 'Click here to activate the sample config file.', 'redux-framework' ) . '</a>';

			// update_option( '<?php echo $args['Plugin Class'];?>_ACTIVATED_NOTICES', $notices )
			;
		}

		/**
		 * Display admin notices
		 *
		 * @access      public
		 * @since       3.0.0
		 * @return      void
		 */
		public function admin_notices() {
			// do_action( 'redux_framework_plugin_admin_notice' );
			// $notices = get_option( '<?php echo $args['Plugin Class'];?>_ACTIVATED_NOTICES', '' );
			// if ( ! empty( $notices ) ) {
			// 	foreach ( $notices as $notice ) {
			// 		echo '<div class="updated notice is-dismissible"><p>' . $notice . '</p></div>'; // phpcs:ignore WordPress.Security.EscapeOutput
			// 	}

			// 	delete_option( '<?php echo $args['Plugin Class'];?>_ACTIVATED_NOTICES' );
			// }
		}

		/**
		 * Fired for each blog when the plugin is deactivated
		 *
		 * @access      private
		 * @since       3.0.0
		 * @return      void
		 */
		private static function single_deactivate() {
			//delete_option( '<?php echo $args['Plugin Class'];?>_ACTIVATED_NOTICES' );
		}

		/**
		 * Turn on or off
		 *
		 * @access      public
		 * @since       3.0.0
		 * @global      string $pagenow The current page being displayed
		 * @return      void
		 */
		public function options_toggle_check() {
			// global $pagenow;

			// if ( isset( $_GET['nonce'] ) && wp_verify_nonce( sanitize_key( $_GET['nonce'] ), 'redux_framework_demo' ) ) {
			// 	if ( isset( $_GET['redux-framework-plugin'] ) && 'demo' === $_GET['redux-framework-plugin'] ) {
			// 		$url = admin_url( add_query_arg( array( 'page' => 'redux-framework' ), 'tools.php' ) );

			// 		if ( 'demo' === $_GET['redux-framework-plugin'] ) {
			// 			if ( false === $this->options['demo'] ) {
			// 				$this->options['demo'] = true;
			// 				$url                   = admin_url( add_query_arg( array( 'page' => 'redux_demo' ), 'admin.php' ) );
			// 			} else {
			// 				$this->options['demo'] = false;

			// 			}
			// 		}
			// 		if ( is_multisite() && $this->plugin_network_activated ) {
			// 			update_site_option( '<?php echo $args['Plugin Class'];?>', $this->options );
			// 		} else {
			// 			update_option( '<?php echo $args['Plugin Class'];?>', $this->options );
			// 		}

			// 		wp_safe_redirect( esc_url( $url ) );

			// 		exit();
			// 	}
			// }
		}

		/**
		 * Edit plugin metalinks
		 *
		 * @access      public
		 * @since       3.0.0
		 *
		 * @param       array  $links The current array of links.
		 * @param       string $file  A specific plugin row.
		 *
		 * @return      array The modified array of links
		 */
		public function plugin_metalinks( $links, $file ) {
			// if ( strpos( $file, 'redux-framework.php' ) !== false && is_plugin_active( $file ) ) {
			// 	$links[] = '<a href="' . esc_url( admin_url( add_query_arg( array( 'page' => 'redux-framework' ), 'tools.php' ) ) ) . '">' . esc_html__( 'What is this?', 'redux-framework' ) . '</a>';
			// }

			return $links;
		}
	}
}
